---
import { SITE } from "@config";
import BlogLayout from "@layouts/Blog.astro";
import BlogPostLayout from "@layouts/BlogPost.astro";
import getPageNumbers from "@utils/getPageNumbers";
import getSortedPosts from "@utils/getSortedPosts";
import { slugify } from "@utils/slugify";
import { CollectionEntry, getCollection } from "astro:content";

export interface Props {
  post: CollectionEntry<"blog">;
}

type PostResult = {
  params: {
    slug: string | number;
  };
  props?: {
    post: CollectionEntry<"blog">;
  };
}[];

type PagePaths = {
  params: {
    slug: string;
  };
}[];

export async function getStaticPaths() {
  const posts = await getCollection("blog");

  const filteredPosts = posts.filter(({ data }) => !data.isDraft);

  let postResult: PostResult = filteredPosts.map((post) => {
    return {
      params: { slug: slugify(post) },
      props: { post },
    };
  });

  const pagePaths: PagePaths = getPageNumbers(filteredPosts.length).map(
    (pageNum) => ({
      params: { slug: String(pageNum) },
    })
  );

  return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post } = Astro.props;

const posts = await getCollection("blog");

const sortedPosts = getSortedPosts(posts);

const totalPages = getPageNumbers(sortedPosts.length);

const currentPage =
  slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
    ? Number(slug)
    : 0;
const lastPost = currentPage * SITE.postPerPage;
const startPost = lastPost - SITE.postPerPage;

const paginatedPosts = sortedPosts.slice(startPost, lastPost);
---

{
  post ? (
    <BlogPostLayout post={post} />
  ) : (
    <BlogLayout
      posts={paginatedPosts}
      pageNum={currentPage}
      totalPages={totalPages.length}
    />
  )
}
