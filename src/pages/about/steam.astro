---
import { SITE } from 'src/config'
import BaseLayout from 'src/layouts/Default.astro'
import {
  makeSteamAPI,
  STEAM_ID,
  STEAM_IDS,
  printUnixDate,
  getProfilesFromSteamIds
} from 'src/lib/steam'

import type {
  GetOwnedGamesResponse,
  GetPlayerAchievementsResponse,
  GetUserStatsResponse,
  GetPlayerSummariesResponse
} from 'src/lib/steam'
import Icon from 'src/components/ui/Icon.astro'

const siteOwnerName = SITE.owner.name,
  pageTitle = 'Game Library',
  pageDescription = ''

const steam = makeSteamAPI(),
  steamIds = STEAM_IDS?.split(',').length ? STEAM_IDS.split(',') : [STEAM_ID]

const profiles = await getProfilesFromSteamIds(steamIds, { steam })

function newProfileClient(
  p?: GetPlayerSummariesResponse['response']['players'][number]
) {
  return {
    data: p,
    PrintAvatar: () => (p ? p.avatarfull : 'N/A'),
    PrintUsername: () => (p ? p.personaname : 'N/A'),
    PrintRealname: () => (p ? p.realname : 'N/A'),
    PrintProfileUrl: () => (p ? p.profileurl : 'N/A'),
    PrintLastLogoff: () => printUnixDate(p?.lastlogoff),
    PrintMemberSince: () => printUnixDate(p?.timecreated),
    PrintStatus: () => {
      return p
        ? {
            0: 'Offline',
            1: 'Online',
            2: 'Busy',
            3: 'Away',
            4: 'Snooze',
            5: 'Looking to Trade',
            6: 'Looking to Play'
          }[p.personastate]
        : 'N/A'
    },
    PrintCurrentGame: (
      gamesList: GetOwnedGamesResponse['response']['games']
    ) => {
      if (!p) return 'N/A'

      return gamesList.find((g) => g.appid === +p.gameid)
    }
  }
}

function newGameClient(g?: GetOwnedGamesResponse['response']['games'][number]) {
  return {
    data: g,
    PrintName: () => (g ? g.name : 'N/A'),
    GetHeaderSrc: () =>
      g
        ? `https://shared.akamai.steamstatic.com/store_item_assets/steam/apps/${g.appid}/header.jpg`
        : 'N/A',
    GetCapsuleSrc: () =>
      g
        ? `https://shared.akamai.steamstatic.com/store_item_assets/steam/apps/${g.appid}/hero_capsule.jpg`
        : 'N/A',
    GetLibrarySrc: () =>
      g
        ? `https://steamcdn-a.akamaihd.net/steam/apps/${g.appid}/library_600x900_2x.jpg`
        : 'N/A',
    PrintAchievementSummary: () => {
      if (g && g.enhanced) {
        return `Achievements ${g.achievementsCountAchieved} / ${g.achievementsCountTotal} (${g.achievementsCountPercent}%)`
      }

      return `Achievements are currently unavailable. Please try again later.`
    },
    PrintLastPlayed: () => printUnixDate(g?.rtime_last_played),
    PrintPlaytime: (minutes: number = g ? g.playtime_forever : 0) => {
      return `${(minutes / 60).toFixed(2)} hours`
    }
  }
}

function newAchievementClient(
  a: GetPlayerAchievementsResponse['playerstats']['achievements'][number]
) {
  return {
    data: a,
    Print: () =>
      `${a.apiname} ${
        a.achieved === 0 ? 'Locked' : `on ${printUnixDate(a.achieved)}`
      }`
  }
}

function newStatClient(
  stat: GetUserStatsResponse['playerstats']['stats'][number]
) {
  return {
    data: stat,
    Print: () => `${stat.name}=${stat.value}`
  }
}
---

<BaseLayout
  title={`${pageTitle} | ${siteOwnerName}`}
  description={pageDescription}
>
  <main class:list={['flex flex-col gap-8 lg:gap-20 h-full px-6 lg:px-12']}>
    <section class='px-6 lg:px-12 prose w-full max-w-full'>

      {
        profiles.map((profile) => {
          const profileClient = newProfileClient(profile.profile)
          const profileGames = profile.games

          return (
            <ul class='container--grid w-full'>
              <li class='full-width-item flex items-center gap-12 pb-12 border-b-2 border-primary-300'>
                <div class='img-container basis-1/3 grow-0 shrink-0'>
                  <img
                    src={profileClient.PrintAvatar()}
                    height='128'
                    width='128'
                    class='h-full w-full object-cover object-center rounded-md'
                  />
                </div>

                <div>
                  <h2 class='text-4xl no-underline my-0'>
                    {profileClient.PrintRealname()}
                  </h2>

                  <span class='text-xs font-light'>
                    (a.k.a
                    <span class='text-lg font-semibold'>
                      {profileClient.PrintUsername() ?? 'N/A'}
                    </span>
                    )
                  </span>

                  <ul>
                    <li class='font-semibold'>
                      Status:
                      <span class='font-normal'>
                        {profileClient.PrintStatus()}
                      </span>
                      <span class='font-normal'>
                        {profileClient.PrintCurrentGame(profileGames)}
                      </span>
                    </li>

                    <li class='font-semibold'>
                      Last Seen:{' '}
                      <span class='font-normal'>
                        {profileClient.PrintLastLogoff()}
                      </span>
                    </li>

                    <li class='font-semibold'>
                      Catalog:
                      <span class='font-normal'>
                        {profileGames.length} games
                      </span>
                    </li>

                    <li class='font-semibold'>
                      Joined:{' '}
                      <span class='font-normal'>
                        {profileClient.PrintMemberSince()}
                      </span>
                    </li>

                    <li class='font-semibold list-none mt-8'>
                      <a
                        href={profileClient.PrintProfileUrl()}
                        class:list={[
                          'no-underline px-8 py-2 rounded-md bg-primary-700 text-primary-50 hover:bg-primary-900 hover:text-primary-100 transition-colors',
                          'dark:bg-primary-200 dark:text-slate-900 dark:hover:bg-primary-400 dark:hover:text-slate-900'
                        ]}
                      >
                        View on <Icon icon='steam-logo' />
                      </a>
                    </li>
                  </ul>
                </div>
              </li>

              {profileGames.map((g) => {
                const gameClient = newGameClient(g)

                return (
                  <li
                    class:list={[
                      'container--game',
                      'flex flex-col items-start p-6 m-0',
                      'border-b-2 border-gray-700'
                    ]}
                  >
                    <div class='container--image grow-0 shrink-0'>
                      <img
                        src={gameClient.GetHeaderSrc()}
                        class='m-0 p-0 inline-block h-full w-full object-contain object-center'
                      />
                    </div>

                    <div class='flex-1 w-full'>
                      <h3 class='text-xl'>{gameClient.PrintName()}</h3>

                      <ul>
                        <li class='font-semibold text-gray-400 m-0'>
                          Last Played: {gameClient.PrintLastPlayed()}
                        </li>
                        <li class='font-semibold text-gray-400 m-0'>
                          Playtime: {gameClient.PrintPlaytime()}
                        </li>
                      </ul>

                      {g && 'achievements' in g && g.achievements ? (
                        <details>
                          <summary>
                            {gameClient.PrintAchievementSummary()}
                          </summary>

                          <pre
                            set:html={g.achievements
                              .filter((a) => a.achieved != 0)
                              .map((a) => newAchievementClient(a).Print())
                              .join('\n')}
                          />
                        </details>
                      ) : null}

                      {g && 'stats' in g && g.stats ? (
                        <details>
                          <summary>Total Stats {g.statsCount}</summary>
                          <pre
                            set:html={g.stats
                              .map((s) => newStatClient(s).Print())
                              .join('\n')}
                          />
                        </details>
                      ) : null}

                      {g && 'news' in g && g.news ? (
                        <details>
                          <summary>Total Articles {g.newsCount}</summary>

                          {g.news.map((a) => (
                            <article class='p-4 border-2 border-gray-600 rounded-sm my-2'>
                              <h5>{a.title}</h5>

                              <ul class='text-xs'>
                                <li>{printUnixDate(a.date)}</li>
                                <li>By {a.author}</li>
                                <li>From {a.feedlabel}</li>
                              </ul>

                              <details>
                                <summary>View Excerpt</summary>

                                <pre
                                  class='whitespace-break-spaces'
                                  set:html={a.contents.slice(0, 1000) + ' ...'}
                                />
                              </details>

                              <a href={a.url}>View Article</a>
                            </article>
                          ))}
                        </details>
                      ) : null}
                    </div>
                  </li>
                )
              })}
            </ul>
          )
        })
      }
    </section>
  </main>
</BaseLayout>

<style>
  .container--grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, 20em);
    grid-auto-flow: dense;
    gap: 1em;
  }
  .full-width-item {
    grid-column: 1 / -1;
  }
</style>
