---
import Icon from './ui/Icon.astro'
import Breadcrumbs from './Breadcrumbs.astro'
import { SITE } from '../config'

const siteOwnerName = SITE.owner.name,
  siteOwnerSocials = SITE.owner.socials,
  siteLogo = SITE.assets.logo

/** Main menu items */
const textLinks: { label: string; href: string }[] = [
  // { label: 'Home', href: '/' },
  { label: 'Work', href: '/work' },
  { label: 'Notes', href: '/notes/' },
  { label: 'About', href: '/' }
]
---

<nav>
  <div class='menu-header'>
    <a href='/' class='site-title text-xl font-bold'>
      <img {...siteLogo} height='32' width='32' />
    </a>

    <Breadcrumbs />

    <menu-button>
      <template>
        <button class='menu-button' aria-expanded='false'>
          <span class='sr-only'>Menu</span>
          <Icon icon='list' />
        </button>
      </template>
    </menu-button>
  </div>

  <noscript>
    <ul class='nav-items'>
      {
        textLinks.map(({ label, href }) => (
          <li>
            <a
              href={href}
              aria-current={Astro.url.pathname === href}
              class:list={[
                'link',
                {
                  active:
                    Astro.url.pathname === href ||
                    (href !== '/' && Astro.url.pathname.startsWith(href))
                }
              ]}
            >
              {label}
            </a>
          </li>
        ))
      }
    </ul>
  </noscript>

  <div id='menu-content' hidden>
    <ul class='nav-items'>
      {
        textLinks.map(({ label, href }) => (
          <li>
            <a
              aria-current={Astro.url.pathname === href}
              class:list={[
                'link',
                {
                  active:
                    Astro.url.pathname === href ||
                    (href !== '/' && Astro.url.pathname.startsWith(href))
                }
              ]}
              href={href}
            >
              {label}
            </a>
          </li>
        ))
      }
    </ul>
  </div>
</nav>

<script>
  class MenuButton extends HTMLElement {
    constructor() {
      super()

      // Inject menu toggle button when JS runs.
      this.appendChild(this.querySelector('template')!.content.cloneNode(true))
      const btn = this.querySelector('button')!

      // Hide menu (shown by default to support no-JS browsers).
      const menu = document.getElementById('menu-content')!
      menu.hidden = true
      // Add "menu-content" class in JS to avoid covering content in non-JS browsers.
      menu.classList.add('menu-content')

      /** Set whether the menu is currently expanded or collapsed. */
      const setExpanded = (expand: boolean) => {
        btn.setAttribute('aria-expanded', expand ? 'true' : 'false')
        menu.hidden = !expand
      }

      // Toggle menu visibility when the menu button is clicked.
      btn.addEventListener('click', () => setExpanded(menu.hidden))

      // Hide menu button for large screens.
      const handleViewports = (e: MediaQueryList | MediaQueryListEvent) => {
        setExpanded(e.matches)
        btn.hidden = e.matches
      }
      const mediaQueries = window.matchMedia('(min-width: 50em)')
      handleViewports(mediaQueries)
      mediaQueries.addEventListener('change', handleViewports)
    }
  }
  customElements.define('menu-button', MenuButton)
</script>

<style>
  nav {
    z-index: 9999;
    position: relative;
  }

  .menu-header {
    display: flex;
    justify-content: space-between;
    gap: 0.5rem;
    padding: 1.5rem;
  }

  .site-title {
    display: flex;
    gap: 0.5rem;
    align-items: center;
    line-height: 1.1;
    text-decoration: none;
  }

  .menu-content {
    @apply bg-gray-50 dark:bg-gray-900;
  }

  .menu-button {
    position: relative;
    display: flex;
    border: 0;
    padding: 0.5rem;
    font-size: 1.5rem;
  }

  .menu-button[aria-expanded='true'] {
  }

  .menu-button[hidden] {
    display: none;
  }

  .menu-button::before {
    position: absolute;
    inset: -1px;
    content: '';
    z-index: -1;
  }

  .menu-content {
    position: absolute;
    left: 0;
    right: 0;
  }

  .nav-items {
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    line-height: 1.2;
    list-style: none;
  }

  .link {
    padding: 0.5rem 0.5rem;
    display: inline-block;
    text-decoration: none;
  }

  .link.active,
  .link:hover,
  .link:focus {
    @apply text-primary-700 dark:text-primary-300;
  }
  
  @media (min-width: 50em) {
    nav {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 2.5rem 5rem;
      gap: 1rem;
    }

    .menu-header {
      justify-content: flex-start;
      padding: 0;
    }

    .site-title {
    }

    .menu-content {
      display: contents;
    }

    .nav-items {
      position: relative;
      display: flex;
      flex-direction: row;
      justify-content: flex-end;
      border: 0;
      padding: 0.5rem 0.5625rem;
    }

    .nav-items::before {
      position: absolute;
      inset: -1px;
      content: '';
      z-index: -1;
    }

    .link {
      transition:
        color 150ms ease-in-out,
        background-color 150ms ease-in-out;
    }
  }

  @media (forced-colors: active) {
    .link.active {
      color: SelectedItem;
    }
  }
</style>
